derecha = 0
arriba = 1
izquierda = 2 
abajo = 3

movimientos = []
movRegreso = []


def calcularDistancia(direccion):
    
    distanciaFinalX = -120
    distanciaFinalY = 850
    
    if direccion == derecha:
        distanciaInicialX = location.position(X, MM) + 250
        distanciaInicialY = location.position(Y, MM)
    elif direccion == arriba:
        distanciaInicialX = location.position(X, MM)
        distanciaInicialY = location.position(Y, MM) + 250
    elif direccion == izquierda:
        distanciaInicialX = location.position(X, MM) - 250
        distanciaInicialY = location.position(Y, MM)
    
    elif direccion == abajo:
        distanciaInicialX = location.position(X, MM) 
        distanciaInicialY = location.position(Y, MM) - 250
    
    distancia = ((distanciaFinalX-distanciaInicialX)**2 + (distanciaFinalY-distanciaInicialY)**2)**(1/2)

    return distancia

def verificarPaso(direccion):
    paso = False
    if direccion == derecha:
        drivetrain.turn_to_heading(90,DEGREES)
        paso = not front_eye.near_object()
    elif direccion == izquierda:
        drivetrain.turn_to_heading(270,DEGREES)
        paso = not front_eye.near_object()
    elif direccion == abajo:
        drivetrain.turn_to_heading(180,DEGREES)
        paso = not front_eye.near_object()
    elif direccion == arriba:
        drivetrain.turn_to_heading(0,DEGREES)
        paso = not front_eye.near_object()   
    return paso

def avanzarRobot(direccion):
    if direccion == derecha:
        drivetrain.turn_to_heading(90,DEGREES)
        drivetrain.drive_for(FORWARD,250,MM)
    elif direccion == arriba:
        drivetrain.turn_to_heading(0,DEGREES)
        drivetrain.drive_for(FORWARD,250,MM)
    elif direccion == izquierda:
        drivetrain.turn_to_heading(270,DEGREES)
        drivetrain.drive_for(FORWARD,250,MM)
    elif direccion == abajo:
        drivetrain.turn_to_heading(180,DEGREES)
        drivetrain.drive_for(FORWARD,250,MM)

def movimientoAnterior(movimiento):
    global movimientos, movRegreso
    if len(movimientos)>0:
        ultimoMovimiento = movimientos[len(movimientos)-1]
        if movimiento == derecha and ultimoMovimiento == izquierda:
            return True
        elif movimiento == izquierda and ultimoMovimiento == derecha:
            return True
        elif movimiento == arriba and ultimoMovimiento == abajo:
            return True
        elif movimiento == abajo and ultimoMovimiento == arriba:
            return True
    if len(movRegreso)>0:
        ultimoMovimiento = movRegreso[len(movRegreso)-1]
        if movimiento == derecha and ultimoMovimiento == izquierda:
            return True
        elif movimiento == izquierda and ultimoMovimiento == derecha:
            return True
        elif movimiento == arriba and ultimoMovimiento == abajo:
            return True
        elif movimiento == abajo and ultimoMovimiento == arriba:
            return True
    return False

def movimientoContrario(movimiento):
    if movimiento == derecha:
        return izquierda
    elif movimiento == izquierda:
        return derecha
    elif movimiento == arriba:
        return abajo
    elif movimiento == abajo:
        return arriba


def AlgoritmoPorEvaluacion():
    global movimientos, movRegreso
    distanciasFuturas = []

    while not down_eye.detect(RED):
        for direccion in range(4):
            distanciasFuturas.append(calcularDistancia(direccion))
        mayorDistancia = max(distanciasFuturas)
        mejorCamino = distanciasFuturas.index(mayorDistancia)
        for movimiento in range(4):
            mejorDistancia = distanciasFuturas[mejorCamino]
            if distanciasFuturas[movimiento] < mejorDistancia and not movimientoAnterior(movimiento) and verificarPaso(movimiento):
                mejorCamino = movimiento
        
        if verificarPaso(mejorCamino) and not movimientoAnterior(mejorCamino):
            avanzarRobot(mejorCamino)
            movimientos.append(mejorCamino)
            movRegreso = []
        else:
            
            ultimoMovimiento = movimientos.pop(len(movimientos)-1)
            movimiento = movimientoContrario(ultimoMovimiento) 
            avanzarRobot(movimiento)
            movRegreso.append(movimiento)


        
def when_started1():
    drivetrain.set_drive_velocity(100, PERCENT)
    drivetrain.set_turn_velocity(100, PERCENT)
    AlgoritmoPorEvaluacion()

vr_thread(when_started1())
