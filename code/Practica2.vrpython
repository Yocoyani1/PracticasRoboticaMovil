def IrA(xDeseada, yDeseada):

    #Posicionamiento en Y
    if not (location.position(Y, MM) - yDeseada == 0):
        if location.position(Y, MM) > yDeseada:
            if 405 > location.position_angle(DEGREES) and location.position_angle(DEGREES) > 315 or -45 < location.position_angle(DEGREES) or location.position_angle(DEGREES) < 45:
                drivetrain.turn_for(RIGHT, 180, DEGREES)           
            drivetrain.drive_for(FORWARD, location.position(Y, MM) - yDeseada, MM)
            drivetrain.turn_for(RIGHT, 180, DEGREES)
        else:
            if location.position_angle(DEGREES) > 135 and location.position_angle(DEGREES) < 225:
                drivetrain.turn_for(RIGHT, 180, DEGREES)
            drivetrain.drive_for(FORWARD, yDeseada - location.position(Y, MM), MM)

    #Posicionamiento en X         
    if not (location.position(X, MM) - xDeseada == 0):
        if location.position(X, MM) > xDeseada:
            if location.position_angle(DEGREES) > 135 and location.position_angle(DEGREES) < 225:
                drivetrain.turn_for(RIGHT, 90, DEGREES)
            else:
                if 405 > location.position_angle(DEGREES) and location.position_angle(DEGREES) > 315 or -45 < location.position_angle(DEGREES) or location.position_angle(DEGREES) < 45:
                    drivetrain.turn_for(LEFT, 90, DEGREES)
            drivetrain.drive_for(FORWARD, location.position(X, MM) - xDeseada, MM)
        else:
            if 405 > location.position_angle(DEGREES) and location.position_angle(DEGREES) > 315 or -45 < location.position_angle(DEGREES) or location.position_angle(DEGREES) < 45:
                drivetrain.turn_for(RIGHT, 90, DEGREES)
            else:
                if location.position_angle(DEGREES) > 135 and location.position_angle(DEGREES) < 225:
                    drivetrain.turn_for(LEFT, 90, DEGREES)
            drivetrain.drive_for(FORWARD, xDeseada - location.position(X, MM), MM)

    #Retorno a posiciÃ³n inicial           
    if location.position_angle(DEGREES) > 45 and 135 > location.position_angle(DEGREES):
        drivetrain.turn_for(LEFT, 90, DEGREES)
    else:
        if location.position_angle(DEGREES) > 135 and 225 > location.position_angle(DEGREES):
            drivetrain.turn_for(RIGHT, 180, DEGREES)
        else:
            if location.position_angle(DEGREES) > 225 and 315 > location.position_angle(DEGREES):
                drivetrain.turn_for(RIGHT, 90, DEGREES)

def Recoger():

    brain.timer_reset()
    magnet.energize(BOOST)
    drivetrain.drive_for(REVERSE, 40, MM)
    while brain.timer_time(SECONDS) < 1:
        magnet.energize(BOOST)
        wait(5, MSEC)
    drivetrain.drive_for(FORWARD, 40, MM)

def Entregar():
    
    brain.timer_reset()
    drivetrain.drive_for(REVERSE, 55, MM)
    while brain.timer_time(SECONDS) < 1:
        magnet.energize(DROP)
        wait(5, MSEC)
    drivetrain.drive_for(FORWARD, 55, MM)

def IrACirculo(numero):
    
    punto = -400 + numero * 400
    posicionY = location.position(Y, MM) - punto
    if not posicionY == 0:
        if location.position(Y, MM) > punto:
            if 315 > location.position_angle(DEGREES) and location.position_angle(DEGREES) < 45:
                drivetrain.turn_for(RIGHT, 180, DEGREES)
            drivetrain.drive_for(FORWARD, (location.position(Y, MM) - punto), MM)
        else:
            if location.position_angle(DEGREES) > 135 and location.position_angle(DEGREES) < 225:
                drivetrain.turn_for(RIGHT, 180, DEGREES)
            drivetrain.drive_for(FORWARD, (punto - location.position(Y, MM)), MM)

def when_started1():
    
    drivetrain.set_drive_velocity(100, PERCENT)
    drivetrain.set_turn_velocity(100, PERCENT)
    Contador = 1
    for repeat_count in range(3):
        IrA(-800, -800)
        IrACirculo(Contador)
        Recoger()
        IrA(-800, -800)
        Entregar()
        IrA(0, -800)
        IrACirculo(Contador)
        Recoger()
        IrA(-800, -800)
        IrACirculo(Contador)
        Entregar()
        IrA(-800, -800)
        Recoger()
        IrA(0, -800)
        IrACirculo(Contador)
        Entregar()
        IrA(-800, -800)
        Contador = Contador + 1
        wait(5, MSEC)



vr_thread(when_started1())
